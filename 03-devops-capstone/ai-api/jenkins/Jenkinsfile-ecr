pipeline {
  agent any

  environment {
    AWS_REGION = 'us-east-2'
    ECR_REGISTRY = '906328874067.dkr.ecr.us-east-2.amazonaws.com'
    ECR_REPO = 'ai-api'
    IMAGE_TAG = 'latest'
    SOURCE_DIR = '03-devops-capstone/ai-api'
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Pre-check: Code Quality + Security') {
      steps {
        script {
          def checks = [
            [job: 'pytest-ai-api',       params: [string(name: 'SOURCE_DIR', value: SOURCE_DIR)]],
            [job: 'flake8-ai-api',       params: [string(name: 'SOURCE_DIR', value: SOURCE_DIR)]],
            [job: 'hadolint-ai-api',     params: [string(name: 'DOCKERFILE_PATH', value: "${SOURCE_DIR}/Dockerfile")]],
            [job: 'yamllint-ai-api',     params: [string(name: 'YAML_DIR', value: "${SOURCE_DIR}/manifests")]],
            [job: 'checkov-ai-api',      params: [string(name: 'IAC_DIR', value: "${SOURCE_DIR}/helm")]],
            [job: 'semgrep-ai-api',      params: [string(name: 'SOURCE_DIR', value: SOURCE_DIR)]]
          ]

          for (check in checks) {
            build job: check.job, parameters: check.params, wait: true
          }
        }
      }
    }

    stage('Authenticate to AWS ECR') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          sh """
            aws ecr get-login-password --region $AWS_REGION | docker login \
              --username AWS \
              --password-stdin $ECR_REGISTRY
          """
        }
      }
    }

    stage('Build & Push Image') {
      steps {
        dir("${SOURCE_DIR}") {
          sh """
            docker build -t $ECR_REPO:$IMAGE_TAG .
            docker tag $ECR_REPO:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
          """
        }
      }
    }

    stage('Trigger Trivy Scan') {
      steps {
        build job: 'trivy-scan-pipeline', wait: true, parameters: [
          string(name: 'IMAGE', value: "$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG")
        ]
      }
    }

    stage('Trigger Helm Deploy') {
      steps {
        build job: 'helm-deploy-ai-api', wait: true
      }
    }
  }
}
