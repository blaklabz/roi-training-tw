pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-2'
        CLUSTER_NAME = 'cluster2-tw'
        KUBECONFIG_PATH = "${env.WORKSPACE}/kubeconfig"
    }

    stages {
        stage('Checkout Repo') {
            steps {
                checkout scm
            }
        }

        stage('Configure AWS and Connect to EKS') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-credentials'
                ]]) {
                    sh '''
                        export AWS_REGION=${AWS_REGION}
                        export CLUSTER_NAME=${CLUSTER_NAME}
                        export KUBECONFIG=${KUBECONFIG_PATH}

                        aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME --kubeconfig $KUBECONFIG
                        TOKEN=$(aws eks get-token --region $AWS_REGION --cluster-name $CLUSTER_NAME --output json | jq -r .status.token)
                        kubectl --kubeconfig=$KUBECONFIG config set-credentials arn:aws:eks:$AWS_REGION:906328874067:cluster/$CLUSTER_NAME --token=$TOKEN
                    '''
                }
            }
        }

        stage('Install ArgoCD') {
            steps {
                sh '''
                    kubectl --kubeconfig=${KUBECONFIG_PATH} create namespace argocd --dry-run=client -o yaml | kubectl --kubeconfig=${KUBECONFIG_PATH} apply --validate=false -f -
                    kubectl --kubeconfig=${KUBECONFIG_PATH} apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml --validate=false
                '''
            }
        }

        stage('Expose ArgoCD via LoadBalancer') {
            steps {
                sh '''
                    kubectl --kubeconfig=${KUBECONFIG_PATH} patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
                '''
            }
        }

        stage('Wait for ArgoCD Server') {
            steps {
                sh '''
                    echo "Waiting for ArgoCD LoadBalancer to get external IP..."
                    for i in {1..30}; do
                        EXTERNAL_IP=$(kubectl --kubeconfig=${KUBECONFIG_PATH} get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                        if [[ ! -z "$EXTERNAL_IP" ]]; then
                            echo "ArgoCD is available at: http://$EXTERNAL_IP"
                            break
                        fi
                        echo "Still waiting..."
                        sleep 10
                    done
                '''
            }
        }

        stage('Deploy ArgoCD Applications') {
            steps {
                sh '''
                    cat <<EOF | kubectl --kubeconfig=${KUBECONFIG_PATH} apply -f -
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ai-api-v1
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/blaklabz/roi-training-tw.git
    targetRevision: HEAD
    path: 03-devops-capstone/apps/ai-api-v1
    helm:
      valueFiles:
        - values.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ai-api-v2
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/blaklabz/roi-training-tw.git
    targetRevision: HEAD
    path: 03-devops-capstone/apps/ai-api-v2
    helm:
      valueFiles:
        - values.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
EOF
                '''
            }
        }

        stage('Print ArgoCD UI Info') {
            steps {
                sh '''
                    ARGO_URL=$(kubectl --kubeconfig=${KUBECONFIG_PATH} get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                    echo "Visit the ArgoCD UI at: http://$ARGO_URL"
                '''
            }
        }
    }
}
